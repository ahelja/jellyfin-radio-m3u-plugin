name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore RadioM3U/RadioM3U.csproj
    
    - name: Build
      run: dotnet build RadioM3U/RadioM3U.csproj --no-restore --configuration Release
    
    - name: Publish
      run: dotnet publish RadioM3U/RadioM3U.csproj --configuration Release --output ./publish --no-build
    
    - name: Create plugin package
      run: |
        mkdir -p package
        cp -r publish/* package/
        cp manifest.json package/
        cp *.png package/ 2>/dev/null || true
        cd package
        zip -r ../RadioM3U_${{ github.ref_name }}.zip .
        cd ..
        
    - name: Calculate checksum
      run: |
        CHECKSUM=$(sha256sum RadioM3U_${{ github.ref_name }}.zip | cut -d' ' -f1)
        echo "CHECKSUM=$CHECKSUM" >> $GITHUB_ENV
        echo "Checksum: $CHECKSUM"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RadioM3U-${{ github.ref_name }}
        path: |
          RadioM3U_${{ github.ref_name }}.zip
          
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: RadioM3U-${{ github.ref_name }}
    
    - name: Calculate checksum
      run: |
        CHECKSUM=$(sha256sum RadioM3U_${{ github.ref_name }}.zip | cut -d' ' -f1)
        echo "CHECKSUM=$CHECKSUM" >> $GITHUB_ENV
    
    - name: Update manifest with checksum
      run: |
        sed -i "s/REPLACE_ME/${{ env.CHECKSUM }}/g" manifest.json
        sed -i "s/OWNER/${{ github.repository_owner }}/g" manifest.json
        sed -i "s/REPO/${{ github.event.repository.name }}/g" manifest.json
        sed -i "s/BRANCH/main/g" manifest.json
        
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          Release ${{ github.ref_name }}
          
          **Installazione:**
          1. Scarica il file `RadioM3U_${{ github.ref_name }}.zip`
          2. Estrai il contenuto nella cartella plugins di Jellyfin
          3. Riavvia Jellyfin
          
          **Manifest URL:**
          ```
          https://raw.githubusercontent.com/${{ github.repository }}/main/manifest.json
          ```
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./RadioM3U_${{ github.ref_name }}.zip
        asset_name: RadioM3U_${{ github.ref_name }}.zip
        asset_content_type: application/zip
    
    - name: Upload updated manifest
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add manifest.json
        git commit -m "Update manifest for release ${{ github.ref_name }}" || exit 0
        git push
